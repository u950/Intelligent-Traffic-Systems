# Dictionary to keep count of each vehicle per stream
stream_vehicle_count = {}

def tiler_src_pad_buffer_probe(pad, info, u_data):
    gst_buffer = info.get_buffer()
    if not gst_buffer:
        print("Unable to get GstBuffer")
        return Gst.PadProbeReturn.OK

    # Retrieve batch metadata from the gst_buffer
    batch_meta = pyds.gst_buffer_get_nvds_batch_meta(hash(gst_buffer))
    l_frame = batch_meta.frame_meta_list
    while l_frame is not None:
        try:
            frame_meta = pyds.NvDsFrameMeta.cast(l_frame.data)
        except StopIteration:
            break

        frame_number = frame_meta.frame_num
        source_id = frame_meta.source_id  # Get the source ID of the frame
        l_obj = frame_meta.obj_meta_list
        num_rects = frame_meta.num_obj_meta
        
        # Initialize object counters for each source if not already present
        if source_id not in stream_vehicle_count:
            stream_vehicle_count[source_id] = {
                PGIE_CLASS_ID_VEHICLE: 0,
                PGIE_CLASS_ID_PERSON: 0,
                PGIE_CLASS_ID_BICYCLE: 0,
                PGIE_CLASS_ID_ROADSIGN: 0
            }

        # Temporary object counter for the current frame
        obj_counter = {
            PGIE_CLASS_ID_VEHICLE: 0,
            PGIE_CLASS_ID_PERSON: 0,
            PGIE_CLASS_ID_BICYCLE: 0,
            PGIE_CLASS_ID_ROADSIGN: 0
        }
        
        # Iterate through each detected object
        while l_obj is not None:
            try: 
                obj_meta = pyds.NvDsObjectMeta.cast(l_obj.data)
            except StopIteration:
                break

            obj_counter[obj_meta.class_id] += 1
            try: 
                l_obj = l_obj.next
            except StopIteration:
                break

        # Update the stream's vehicle count
        for class_id, count in obj_counter.items():
            stream_vehicle_count[source_id][class_id] += count

        # Print frame-level and cumulative counts per stream
        print(f"Source ID={source_id} Frame Number={frame_number} "
              f"Num Objects={num_rects} Vehicle Count={obj_counter[PGIE_CLASS_ID_VEHICLE]} "
              f"Person Count={obj_counter[PGIE_CLASS_ID_PERSON]}")
        print(f"Cumulative Count - Stream {source_id}: Vehicle Count={stream_vehicle_count[source_id][PGIE_CLASS_ID_VEHICLE]}, "
              f"Person Count={stream_vehicle_count[source_id][PGIE_CLASS_ID_PERSON]}")

        # Get frame rate for each stream
        fps_streams[f"stream{source_id}"].get_fps()
        
        try:
            l_frame = l_frame.next
        except StopIteration:
            break

    return Gst.PadProbeReturn.OK
