#!/usr/bin/env python3

import sys
import gi
import configparser
import math
import time
from gi.repository import GObject, Gst
from common.is_aarch_64 import is_aarch64
from common.FPS import GETFPS
import pyds

# Initialize FPS dictionary
fps_streams = {}
MAX_DISPLAY_LEN = 64
PGIE_CLASS_ID_VEHICLE = 0
PGIE_CLASS_ID_BICYCLE = 1
PGIE_CLASS_ID_PERSON = 2
PGIE_CLASS_ID_ROADSIGN = 3
MUXER_OUTPUT_WIDTH = 1920
MUXER_OUTPUT_HEIGHT = 1080
MUXER_BATCH_TIMEOUT_USEC = 4000000
TILED_OUTPUT_WIDTH = 1280
TILED_OUTPUT_HEIGHT = 720

pgie_classes_str = ["Vehicle", "TwoWheeler", "Person", "RoadSign"]

def tiler_src_pad_buffer_probe(pad, info, u_data):
    frame_number = 0
    num_rects = 0
    gst_buffer = info.get_buffer()
    if not gst_buffer:
        print("Unable to get GstBuffer ")
        return

    batch_meta = pyds.gst_buffer_get_nvds_batch_meta(hash(gst_buffer))
    l_frame = batch_meta.frame_meta_list
    while l_frame is not None:
        try:
            frame_meta = pyds.NvDsFrameMeta.cast(l_frame.data)
        except StopIteration:
            break
        frame_number = frame_meta.frame_num
        l_obj = frame_meta.obj_meta_list
        num_rects = frame_meta.num_obj_meta
        obj_counter = {
            PGIE_CLASS_ID_VEHICLE: 0,
            PGIE_CLASS_ID_PERSON: 0,
            PGIE_CLASS_ID_BICYCLE: 0,
            PGIE_CLASS_ID_ROADSIGN: 0
        }
        while l_obj is not None:
            try:
                obj_meta = pyds.NvDsObjectMeta.cast(l_obj.data)
            except StopIteration:
                break
            obj_counter[obj_meta.class_id] += 1
            try:
                l_obj = l_obj.next
            except StopIteration:
                break
        print(f"Frame Number={frame_number} Number of Objects={num_rects} Vehicle_count={obj_counter[PGIE_CLASS_ID_VEHICLE]} Person_count={obj_counter[PGIE_CLASS_ID_PERSON]}")
        fps_streams["stream{0}".format(frame_meta.pad_index)].get_fps()
        try:
            l_frame = l_frame.next
        except StopIteration:
            break
    return Gst.PadProbeReturn.OK

def create_source_bin(index, device):
    print("Creating source bin for device:", device)
    bin_name = f"source-bin-{index:02d}"
    nbin = Gst.Bin.new(bin_name)
    if not nbin:
        sys.stderr.write(" Unable to create source bin \n")

    # Create a v4l2src element for USB camera
    source = Gst.ElementFactory.make("v4l2src", "usb-source")
    if not source:
        sys.stderr.write(" Unable to create source for USB camera \n")
    source.set_property("device", device)

    # Set up caps for the USB camera
    caps = Gst.ElementFactory.make("capsfilter", "source-caps")
    caps.set_property("caps", Gst.Caps.from_string("video/x-raw, width=640, height=480, framerate=30/1"))

    # Use nvvideoconvert for memory management
    nvvidconv = Gst.ElementFactory.make("nvvideoconvert", "nvvideo-converter")
    if not nvvidconv:
        sys.stderr.write(" Unable to create nvvideoconvert \n")

    # Create the nvv4l2h264enc encoder
    encoder = Gst.ElementFactory.make("nvv4l2h264enc", "h264-encoder")
    encoder.set_property("bitrate", 4000000)

    # Use rtph264pay for packetizing
    h264parser = Gst.ElementFactory.make("h264parse", "h264-parser")

    queue = Gst.ElementFactory.make("queue", "queue")

    nbin.add(source)
    nbin.add(caps)
    nbin.add(nvvidconv)
    nbin.add(encoder)
    nbin.add(h264parser)
    nbin.add(queue)

    source.link(caps)
    caps.link(nvvidconv)
    nvvidconv.link(encoder)
    encoder.link(h264parser)
    h264parser.link(queue)

    # Create ghost pad
    bin_pad = nbin.add_pad(Gst.GhostPad.new_no_target("src", Gst.PadDirection.SRC))
    if not bin_pad:
        sys.stderr.write(" Failed to add ghost pad in source bin \n")
        return None
    return nbin

def main(args):
    if len(args) < 2:
        sys.stderr.write("usage: %s <device1> [device2] ... [deviceN]\n" % args[0])
        sys.exit(1)

    for i in range(0, len(args) - 1):
        fps_streams["stream{0}".format(i)] = GETFPS(i)

    number_sources = len(args) - 1

    GObject.threads_init()
    Gst.init(None)
    pipeline = Gst.Pipeline()
    is_live = False

    if not pipeline:
        sys.stderr.write(" Unable to create Pipeline \n")

    print("Creating streammux \n ")
    streammux = Gst.ElementFactory.make("nvstreammux", "Stream-muxer")
    if not streammux:
        sys.stderr.write(" Unable to create NvStreamMux \n")

    pipeline.add(streammux)
    for i in range(number_sources):
        device = args[i + 1]
        source_bin = create_source_bin(i, device)
        if not source_bin:
            sys.stderr.write("Unable to create source bin \n")
        pipeline.add(source_bin)
        sinkpad = streammux.get_request_pad(f"sink_{i}")
        if not sinkpad:
            sys.stderr.write("Unable to create sink pad bin \n")
        srcpad = source_bin.get_static_pad("src")
        if not srcpad:
            sys.stderr.write("Unable to create src pad bin \n")
        srcpad.link(sinkpad)

    # Rest of the pipeline elements (pgie, tiler, etc.) similar to original code
    # Add pgie, tiler, nvvidconv, nvosd, sink, and link them here

    # Probe to extract metadata and handle buffer
    tiler_src_pad = tiler.get_static_pad("sink")
    if not tiler_src_pad:
        sys.stderr.write(" Unable to get src pad \n")
    else:
        tiler_src_pad.add_probe(Gst.PadProbeType.BUFFER, tiler_src_pad_buffer_probe, 0)

    print("Starting pipeline \n")
    pipeline.set_state(Gst.State.PLAYING)
    try:
        loop = GObject.MainLoop()
        loop.run()
    except:
        pass
    pipeline.set_state(Gst.State.NULL)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
